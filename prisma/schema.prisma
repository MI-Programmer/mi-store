datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  ADMIN_TEST
}
 
model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String         @unique
  password         String?
  phone            String?
  shippingAddress  String?
  image            String?
  role             UserRole?      @default(USER)

  orders           Order[]
  orderIds         String[]       @db.ObjectId
  usersOrders      Json?
  accounts         Account[]
 
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
 
model Account {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @db.String
  access_token      String?     @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.String
  session_state     String?
 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
 
  user User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
                                @@unique([provider, providerAccountId])
}
 

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int             
  category      String
  image         String
  colors        String[]        
  sizes         Json          
  description   String

  orderItems  OrderItem[]
 
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalPrice    Float
  status        OrderStatus    @default(PROCESSING)
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model OrderItem {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  order       Order            @relation(fields: [orderId], references: [id])
  orderId     String           @db.ObjectId
  product     Product          @relation(fields: [productId], references: [id])
  productId   String           @db.ObjectId
  quantity    Int
  selectedColor String
  selectedSize  String 
}